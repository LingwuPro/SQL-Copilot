SELECT COUNT(Singer_ID) FROM singer;
SELECT COUNT(*)  FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT s.Name, s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (     SELECT MIN(Age)     FROM singer )
SELECT DISTINCT Country FROM     singer WHERE     Age > 20;
SELECT DISTINCT Country FROM     singer WHERE     Age > 20;
SELECT Country, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Country;
SELECT Country, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Country;
SELECT s.Name, s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*)  FROM     concert WHERE     Year IN (2014, 2015);
SELECT COUNT(*)  FROM     concert WHERE     Year IN (2014, 2015);
SELECT stadium.Name, COUNT(concert.concert_ID) as NumberOfConcerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(concert_ID) as NumberOfConcerts FROM concert GROUP BY Year ORDER BY NumberOfConcerts DESC LIMIT 1;
SELECT Year, COUNT(concert_ID) as Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC LIMIT 1;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT DISTINCT s.Country FROM     singer s WHERE     s.Age > 40     OR s.Age < 30;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year != 2014 OR concert.Year IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year != 2014 OR concert.Year IS NULL;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as NumberOfSingers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) as Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) as NumberOfConcerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT s.Name, s.Country FROM singer AS s WHERE s.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT COUNT(concert.concert_ID) as NumberOfConcerts FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);
SELECT COUNT(concert.concert_ID)  FROM     concert JOIN     stadium ON     concert.Stadium_ID = stadium.Stadium_ID WHERE     stadium.Capacity = (         SELECT             MAX(Capacity)         FROM             stadium     );
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT MIN(pet_age), weight FROM Pets WHERE PetType = 'dog';
SELECT MIN(pet_age), weight FROM Pets WHERE PetType = 'dog';
SELECT PetType, MAX(weight) as MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) as max_weight FROM Pets GROUP BY PetType;
SELECT COUNT(Pets.PetID) FROM     Pets JOIN     Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN     Student ON Has_Pet.StuID = Student.StuID WHERE     Student.Age > 20;
SELECT COUNT(Pets.PetID) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM     Has_Pet JOIN     Pets ON Has_Pet.PetID = Pets.PetID JOIN     Student ON Has_Pet.StuID = Student.StuID WHERE     Pets.PetType = 'dog' AND Student.Sex = 'F';
SELECT COUNT(*) FROM     Has_Pet JOIN     Pets ON Has_Pet.PetID = Pets.PetID JOIN     Student ON Has_Pet.StuID = Student.StuID WHERE     Pets.PetType = 'dog' AND Student.Sex = 'female';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Fname FROM Student WHERE StuID IN (   SELECT     StuID   FROM     Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE     PetType = 'cat' ) AND StuID IN (   SELECT     StuID   FROM     Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE     PetType = 'dog' );
SELECT Fname FROM     Student WHERE     StuID IN (         SELECT             StuID         FROM             Has_Pet         JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE             PetType = 'cat'     )     AND StuID IN (         SELECT             StuID         FROM             Has_Pet         JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE             PetType = 'dog'     );
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.StuID NOT IN (     SELECT     Student.StuID     FROM     Student     JOIN Has_Pet ON Student.StuID = Has_Pet.StuID     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE     Pets.PetType = 'cat' ) GROUP BY Student.StuID;
SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT     StuID   FROM     Has_Pet   JOIN     Pets   ON     Has_Pet.PetID = Pets.PetID   WHERE     PetType = 'cat' );
SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT     StuID   FROM     Has_Pet   JOIN     Pets   ON     Has_Pet.PetID = Pets.PetID   WHERE     PetType = 'cat' );
SELECT Fname, Age FROM     Student WHERE     StuID IN (         SELECT             StuID         FROM             Has_Pet         JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE             PetType = 'dog'     )     AND StuID NOT IN (         SELECT             StuID         FROM             Has_Pet         JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE             PetType = 'cat'     );
SELECT Fname FROM Student WHERE StuID IN (   SELECT     StuID   FROM     Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE     PetType = 'dog' ) AND StuID NOT IN (   SELECT     StuID   FROM     Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE     PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) as Average_Age, MAX(pet_age) as Maximum_Age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as AverageWeight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
SELECT Student.StuID, Student.Fname, Student.LName, COUNT(Pets.PetID) as NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID HAVING COUNT(Pets.PetID) > 0;
SELECT Student.StuID, COUNT(Pets.PetID) as NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID;
SELECT Fname, Sex FROM Student WHERE StuID IN (   SELECT     StuID   FROM     Has_Pet   GROUP BY     StuID   HAVING     COUNT(PetID) > 1 );
SELECT Fname, Sex FROM     Student WHERE     StuID IN (         SELECT             StuID         FROM             Has_Pet         GROUP BY             StuID         HAVING             COUNT(PetID) > 1     );
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(ContId) FROM continents;
SELECT COUNT(ContId) FROM continents;
SELECT   continents.ContId,   continents.Continent,   COUNT(countries.CountryId) as NumberOfCountries FROM   continents JOIN   countries ON continents.ContId = countries.Continent GROUP BY   continents.ContId, continents.Continent ORDER BY   continents.ContId;
SELECT ContId, Continent, COUNT(CountryId) as NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY ContId, Continent;
SELECT COUNT(*)  FROM countries;
SELECT COUNT(*)  FROM countries;
SELECT FullName, car_makers.Id, COUNT(car_names.Model) as NumberOfModels FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id, FullName ORDER BY FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(car_names.Model) as NumberOfModels FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName ORDER BY car_makers.FullName;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data) LIMIT 1;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Make = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Make = cars_data.Id WHERE cars_data.Year = 1970 GROUP BY car_makers.Maker;
SELECT Make, Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = (SELECT MIN(Year) FROM cars_data);
SELECT Maker, Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Make = cars_data.Id ORDER BY Year LIMIT 1;
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year > 1980;
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Year > 1980;
SELECT   continents.Continent,   COUNT(car_makers.Id) as Count FROM   car_makers   JOIN countries ON car_makers.Country = countries.CountryName   JOIN continents ON countries.Continent = continents.ContId GROUP BY   continents.Continent;
SELECT continents.Continent, COUNT(car_makers.Id) as NumberOfCarMakers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryName = car_makers.Country GROUP BY continents.Continent;
SELECT CountryName FROM   (SELECT     countries.CountryName,     COUNT(car_makers.Id) AS num_makers   FROM     car_makers   JOIN     countries ON car_makers.Country = countries.CountryId   GROUP BY     countries.CountryName) ORDER BY   num_makers DESC LIMIT 1;
SELECT CountryName FROM countries WHERE CountryId = (     SELECT     Country     FROM     car_makers     GROUP BY     Country     ORDER BY     COUNT(Id) DESC     LIMIT 1 )
SELECT car_makers.FullName, COUNT(car_names.Model) as ModelCount FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.FullName ORDER BY ModelCount DESC;
SELECT car_makers.Id, car_makers.FullName, COUNT(car_names.Model) as NumberOfModels FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName;
SELECT Accelerate FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cn.Model = "amc hornet sportabout (sw)";
SELECT Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Model = 'amc hornet sportabout (sw)';
SELECT COUNT(*) FROM car_makers WHERE Country = 'France';
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France';
SELECT COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Country = 'USA';
SELECT COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Country = 'United States';
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.MakerId;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryName = car_makers.Country GROUP BY countries.CountryId, countries.CountryName;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryName = car_makers.Country GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(car_makers.Id) >= 1;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) as Avg_Weight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) as Average_Weight, AVG(Year) as Average_Year FROM cars_data GROUP BY Year;
SELECT CountryName FROM     (SELECT         countries.CountryName,         COUNT(car_makers.Id) AS num_makers     FROM         car_makers         JOIN countries ON car_makers.Country = countries.CountryName         JOIN continents ON countries.Continent = continents.ContId     WHERE         continents.Continent = 'Europe'     GROUP BY         countries.CountryName) WHERE     num_makers >= 3;
SELECT CountryName FROM     countries WHERE     Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')     AND CountryId IN (         SELECT             Country         FROM             car_makers         GROUP BY             Country         HAVING             COUNT(Id) >= 3     );
SELECT MAX(cars_data.Horsepower) AS Max_Horsepower, car_names.Make AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make;
SELECT MAX(cars_data.Horsepower) AS Max_Horsepower, car_names.Make AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY Max_Horsepower DESC LIMIT 1;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT Model, MAX(MPG) as Highest_MPG FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY Model ORDER BY Highest_MPG DESC LIMIT 1;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(Edispl) as Avg_Edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT Cylinders, MAX(Accelerate) as Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) as Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT Model, COUNT(Make) as Num_Makes FROM car_names GROUP BY Model ORDER BY Num_Makes DESC LIMIT 1;
SELECT Model FROM (SELECT Make, COUNT(DISTINCT Model) AS num_versions FROM car_names GROUP BY Make) ORDER BY num_versions DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*)  FROM cars_data WHERE Year = 1980;
SELECT COUNT(*)  FROM  cars_data  WHERE  Year = 1980;
SELECT COUNT(*) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(*) FROM car_names WHERE MakeId = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')
SELECT FullName, car_makers.Id FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id, FullName HAVING COUNT(car_names.Model) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) > 3;
SELECT DISTINCT model_list.Model FROM     model_list JOIN     car_makers ON model_list.Maker = car_makers.Maker JOIN     car_names ON model_list.Model = car_names.Model JOIN     cars_data ON car_names.MakeId = cars_data.Id WHERE     car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Make = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500 GROUP BY model_list.Model;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 GROUP BY Year;
SELECT DISTINCT Year FROM cars_data WHERE (Weight < 4000 AND Weight > 3000);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Cylinders FROM cars_data WHERE Id = (     SELECT     Id     FROM     car_names     WHERE     Model = "volvo" ) ORDER BY Accelerate ASC LIMIT 1;
SELECT MIN(cars_data.Cylinders) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Make = cars_data.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (     SELECT     MIN(Accelerate)     FROM     cars_data     JOIN car_names ON cars_data.Id = car_names.Make     JOIN car_makers ON car_names.MakeId = car_makers.Id     WHERE     car_makers.Maker = 'volvo' )
SELECT COUNT(*) FROM     cars_data WHERE     Accelerate > (         SELECT             Accelerate         FROM             cars_data         ORDER BY             Horsepower DESC         LIMIT 1     )
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (     SELECT     Accelerate     FROM     cars_data     WHERE     Horsepower = (         SELECT         MAX(Horsepower)         FROM         cars_data     ) )
SELECT COUNT(Country) as NumberOfCountries FROM     (SELECT         Country,         COUNT(Id) as NumberOfCarMakers     FROM         car_makers     GROUP BY         Country     HAVING         COUNT(Id) > 2)
SELECT COUNT(*)  FROM (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(*) > 2 ) AS subquery;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT Model, MAX(Horsepower) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Cylinders = 4 GROUP BY Model ORDER BY MAX(Horsepower) DESC LIMIT 1;
SELECT car_names.Model, MAX(cars_data.Horsepower) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 GROUP BY car_names.Model ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT MakeId, Model FROM car_names WHERE MakeId IN (     SELECT     Make     FROM     cars_data     WHERE     Cylinders < 4 AND Horsepower > (         SELECT         MIN(Horsepower)         FROM         cars_data     ) )
SELECT MAX(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980;
SELECT MAX(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Maker = car_names.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_names.Maker = car_makers.Maker WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Maker = car_names.Make JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND model_list.Maker != 'Ford'
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(car_names.Model) >= 2 AND COUNT(car_makers.Maker) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Make = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(cars_data.Id) > 3;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryName = car_makers.Country JOIN model_list ON car_makers.Maker = model_list.Maker WHERE model_list.Model = 'fiat' OR countries.CountryId IN (     SELECT     CountryId     FROM     car_makers     JOIN countries ON car_makers.Country = countries.CountryName     GROUP BY     countries.CountryId     HAVING     COUNT(car_makers.Id) > 3 ) GROUP BY countries.CountryId;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryName = car_makers.Country WHERE countries.CountryId IN (     SELECT         CountryId     FROM         car_makers     GROUP BY         CountryId     HAVING         COUNT(Id) > 3 ) OR countries.CountryId IN (     SELECT         CountryId     FROM         car_makers     JOIN model_list ON car_makers.Maker = model_list.Maker     WHERE         model_list.Model = 'Fiat' )
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA";
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*)  FROM airports;
SELECT COUNT(*)  FROM flights;
SELECT COUNT(*)  FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT *  FROM     airlines WHERE     Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = "Alton airport";
SELECT City, Country FROM airports WHERE AirportName = "Alton Airport";
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT City, COUNT(*) as NumArrivingFlights FROM   airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY   City ORDER BY   NumArrivingFlights DESC LIMIT 1;
SELECT City, COUNT(DestAirport) AS Frequency FROM   airports   JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY   City ORDER BY   Frequency DESC LIMIT 1;
SELECT City, COUNT(*) as DepartingFlights FROM   airports   JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY   City ORDER BY   DepartingFlights DESC LIMIT 1;
SELECT City, COUNT(*) as frequency FROM   airports JOIN   flights ON airports.AirportCode = flights.SourceAirport GROUP BY   City ORDER BY   frequency DESC LIMIT 1;
SELECT AirportCode, COUNT(*) AS num_flights FROM   flights GROUP BY   SourceAirport ORDER BY   num_flights DESC LIMIT 1;
SELECT AirportCode FROM   (SELECT     SourceAirport AS AirportCode,     COUNT(*) AS FlightsCount   FROM     flights   GROUP BY     SourceAirport   UNION ALL   SELECT     DestAirport AS AirportCode,     COUNT(*) AS FlightsCount   FROM     flights   GROUP BY     DestAirport) GROUP BY   AirportCode ORDER BY   SUM(FlightsCount) DESC LIMIT 1;
SELECT AirportCode FROM   airports JOIN   flights ON airports.AirportCode = flights.SourceAirport GROUP BY   AirportCode ORDER BY   COUNT(FlightNo) ASC LIMIT 1;
SELECT AirportCode FROM   airports WHERE   AirportCode NOT IN (     SELECT       SourceAirport     FROM       flights   )   AND AirportCode NOT IN (     SELECT       DestAirport     FROM       flights   ) LIMIT 1;
SELECT Airline, COUNT(*) as NumberOfFlights FROM flights GROUP BY Airline ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;
SELECT Abbreviation, Country FROM     airlines WHERE     uid = (         SELECT             Airline         FROM             (                 SELECT                     Airline, COUNT(*) as num_flights                 FROM                     flights                 GROUP BY                     Airline             )         ORDER BY             num_flights ASC         LIMIT 1     );
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE SourceAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE DestAirport = 'AHD';
SELECT a.uid, a.Airline, a.Abbreviation, a.Country FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO' GROUP BY a.uid, a.Airline, a.Abbreviation, a.Country HAVING COUNT(DISTINCT f1.SourceAirport) = 2;
SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO' GROUP BY a.Airline HAVING COUNT(DISTINCT f1.SourceAirport) > 1 AND COUNT(DISTINCT f2.SourceAirport) > 1;
SELECT a.uid, a.Airline, a.Abbreviation, a.Country FROM airlines a JOIN flights f1 ON a.uid = f1.Airline WHERE f1.SourceAirport = 'CVO' AND a.uid NOT IN (   SELECT     f2.Airline   FROM     flights f2   WHERE     f2.SourceAirport = 'APG' )
SELECT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'CVO' AND a.Airline NOT IN (   SELECT     a2.Airline   FROM     flights f2     JOIN airlines a2 ON f2.Airline = a2.uid   WHERE     f2.SourceAirport = 'APG' ) GROUP BY a.Airline;
SELECT Airline FROM   (SELECT     Airline,     COUNT(FlightNo) AS num_flights   FROM     flights   GROUP BY     Airline) AS flight_counts WHERE   num_flights >= 10;
SELECT Airline FROM   (SELECT     Airline,     COUNT(*) AS num_flights   FROM     flights   GROUP BY     Airline) AS subquery WHERE   num_flights >= 10;
SELECT a.uid, a.Airline, a.Abbreviation, a.Country FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.Airline = a.uid) < 200;
SELECT Airline FROM   (SELECT     Airline,     COUNT(*) AS num_flights   FROM     flights   GROUP BY     Airline) AS subquery WHERE   num_flights < 200;
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE SourceAirport = "APG";
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = "APG";
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE City = "Aberdeen";
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport IN (   SELECT AirportCode   FROM airports   WHERE City IN ('Aberdeen', 'Abilene') );
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights);
SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT     SourceAirport   FROM     flights) AND AirportCode NOT IN (   SELECT     DestAirport   FROM     flights);
SELECT COUNT(*)  FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name, Age FROM employee ORDER BY Age ASC;
SELECT Name, Age FROM employee ORDER BY Age ASC;
SELECT City, COUNT(Employee_ID) as Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(Employee_ID) as Num_Employees FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Location, COUNT(Shop_ID) as Number_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(Shop_ID) as Total_Shops FROM shop GROUP BY Location;
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM employee WHERE Employee_ID = (   SELECT     Employee_ID   FROM     evaluation   GROUP BY     Employee_ID   ORDER BY     COUNT(*) DESC   LIMIT     1 );
SELECT Name FROM employee WHERE Employee_ID = (   SELECT     Employee_ID   FROM     evaluation   GROUP BY     Employee_ID   ORDER BY     COUNT(*) DESC   LIMIT     1 );
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name, COUNT(hiring.Employee_ID) as Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) as Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name;
SELECT SUM(Bonus) as Total_Bonus FROM evaluation;
SELECT SUM(Bonus) as Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT *  FROM     hiring;
SELECT DISTINCT s1.District FROM     shop s1 JOIN     shop s2 ON     s1.District = s2.District WHERE     s1.Number_products < 3000 AND     s2.Number_products > 10000;
SELECT DISTINCT s1.District FROM     shop s1 JOIN     shop s2 ON s1.District = s2.District WHERE     s1.Number_products < 3000     AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*)  FROM Documents;
SELECT COUNT(*)  FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV";
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(*)  FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT COUNT(*)  FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'PPT';
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) as Number_of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Template_ID, COUNT(Document_ID) as Usage_Count FROM Documents GROUP BY Template_ID;
SELECT Template_ID, Template_Type_Code FROM     Templates WHERE     Template_ID = (         SELECT             Template_ID         FROM             Documents         GROUP BY             Template_ID         ORDER BY             COUNT(*) DESC         LIMIT 1     );
SELECT Template_ID, Template_Type_Code FROM   Templates WHERE   Template_ID = (     SELECT       Template_ID     FROM       Documents     GROUP BY       Template_ID     ORDER BY       COUNT(*) DESC     LIMIT 1   )
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT COUNT(*)  FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(Template_ID) as Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(Template_ID) as Total_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT     Template_Type_Code   FROM     Templates   GROUP BY     Template_Type_Code   HAVING     COUNT(Template_ID) < 3 );
SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates;
SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = "Data base";
SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = 'Data base';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Template_Type_Code, COUNT(Documents.Document_ID) as Number_of_Documents FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) as Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code FROM   (SELECT     T.Template_Type_Code,     COUNT(D.Document_ID) AS Document_Count   FROM     Templates T     JOIN Documents D ON T.Template_ID = D.Template_ID   GROUP BY     T.Template_Type_Code) ORDER BY   Document_Count DESC LIMIT 1;
SELECT Template_Type_Code FROM   Templates JOIN   Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY   Template_Type_Code ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT DISTINCT Template_ID FROM Documents));
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM     Ref_Template_Types JOIN     Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN     Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT DISTINCT Template_Type_Description FROM     Templates     JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code     JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation";
SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT COUNT(*)  FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(Paragraph_ID) as Total_Paragraphs FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT COUNT(Paragraph_ID)  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show';
SELECT * FROM     Paragraphs WHERE     Paragraph_Text = 'Korea ';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Korea %';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Document_ID, COUNT(Paragraph_ID) as Number_of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT Document_ID, COUNT(Paragraph_ID) as Number_of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS NumberOfParagraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) as NumberOfParagraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT Document_ID FROM     Paragraphs GROUP BY     Document_ID HAVING     COUNT(Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT Document_ID, Document_Name FROM     Documents WHERE     Document_ID = (         SELECT             Document_ID         FROM             Paragraphs         GROUP BY             Document_ID         ORDER BY             COUNT(Paragraph_ID) DESC         LIMIT 1     );
SELECT Document_ID, COUNT(Paragraph_ID) as Paragraph_Count FROM     Paragraphs GROUP BY     Document_ID ORDER BY     Paragraph_Count ASC LIMIT 1;
SELECT Document_ID FROM (SELECT Document_ID, COUNT(Paragraph_ID) as Paragraph_Count FROM Paragraphs GROUP BY Document_ID) ORDER BY Paragraph_Count ASC LIMIT 1;
SELECT Document_ID FROM     (SELECT         Document_ID,         COUNT(Paragraph_ID) AS Paragraph_Count     FROM         Paragraphs     GROUP BY         Document_ID) WHERE     Paragraph_Count BETWEEN 1 AND 2;
SELECT Document_ID FROM Documents WHERE (SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2;
SELECT Document_ID, Paragraph_Text FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%';
SELECT COUNT(*)  FROM teacher;
SELECT COUNT(*)  FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown, COUNT(*) as NumberOfTeachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(Teacher_ID) as NumberOfTeachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name, COUNT(course_arrange.Course_ID) as Number_of_Courses FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) as Num_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID IN (   SELECT Teacher_ID   FROM course_arrange   GROUP BY Teacher_ID   HAVING COUNT(Course_ID) >= 2 )
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT COUNT(*)  FROM visitor  WHERE Age < 30;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT AVG(Num_of_Staff) as Average_Staff FROM museum WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (   SELECT     MIN(m2.Num_of_Staff)   FROM     museum m2   WHERE     m2.Open_Year > 2010 );
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(visit.Museum_ID) > 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT Museum_ID, Name FROM museum JOIN (SELECT Museum_ID, COUNT(*) AS visit_count FROM visit GROUP BY Museum_ID ORDER BY visit_count DESC LIMIT 1) AS most_visited ON museum.Museum_ID = most_visited.Museum_ID;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL;
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1;
SELECT AVG(Num_of_Ticket) as Average_Tickets, MAX(Num_of_Ticket) as Maximum_Tickets FROM visit;
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1;
SELECT v.Name FROM visitor v JOIN visit vt1 ON v.ID = vt1.visitor_ID JOIN museum m1 ON vt1.Museum_ID = m1.Museum_ID JOIN visit vt2 ON v.ID = vt2.visitor_ID JOIN museum m2 ON vt2.Museum_ID = m2.Museum_ID WHERE m1.Open_Year < 2009 AND m2.Open_Year > 2011;
SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 OR museum.Museum_ID IS NULL;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) as total_players FROM players;
SELECT COUNT(*)  FROM players;
SELECT COUNT(*) as total_matches FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(winner_rank) as average_winner_rank FROM matches;
SELECT AVG(winner_rank) as average_winner_rank FROM matches;
SELECT MAX(loser_rank) as highest_loser_rank FROM matches;
SELECT MIN(loser_rank) as best_rank_of_losers FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM     matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2;
SELECT winner_name FROM matches WHERE year = 2013 AND winner_name IN (   SELECT     winner_name   FROM     matches   WHERE     year = 2016 )
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT winner_ioc AS country_code, winner_name AS first_name FROM matches WHERE tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY winner_id HAVING COUNT(DISTINCT tourney_name) = 2;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE (m.tourney_name = "WTA Championships" OR m.tourney_name = "Australian Open") GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, country_code FROM players JOIN ( SELECT player_id, COUNT(*) as tour_count FROM rankings GROUP BY player_id ORDER BY tour_count DESC LIMIT 1 ) AS most_tours ON players.player_id = most_tours.player_id;
SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(tours) DESC LIMIT 1;
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = (     SELECT     winner_id     FROM     matches     GROUP BY     winner_id     ORDER BY     COUNT(*) DESC     LIMIT 1 ) LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches ) LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = "Australian Open" AND winner_rank_points = (   SELECT     MAX(winner_rank_points)   FROM     matches   WHERE     tourney_name = "Australian Open" )
SELECT winner_name FROM matches WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.player_id, players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT players.first_name, players.player_id, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name ORDER BY total_ranking_points DESC;
SELECT first_name, SUM(ranking_points) as total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;
SELECT country_code, COUNT(player_id) as num_players FROM players GROUP BY country_code ORDER BY num_players DESC;
SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(player_id) as num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;
SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;
SELECT year, COUNT(*) as matches_played FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches WHERE winner_age IS NOT NULL ORDER BY winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L';
SELECT first_name, country_code, birth_date FROM     players JOIN     matches ON     players.player_id = matches.winner_id JOIN     rankings ON     matches.winner_id = rankings.player_id WHERE     rankings.ranking_points = (         SELECT             MAX(ranking_points)         FROM             rankings     );
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (     SELECT winner_id     FROM matches     ORDER BY winner_rank_points DESC     LIMIT 1 );
SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand;
SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed + injured) AS max_death_toll, MIN(killed + injured) AS min_death_toll FROM death;
SELECT AVG(injured) as average_injuries FROM death;
SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM     battle;
SELECT COUNT(*) FROM     battle WHERE     id NOT IN (         SELECT             lost_in_battle         FROM             ship         WHERE             tonnage = 225     );
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel' AND ship.lost_in_battle IS NULL;
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*)  FROM Courses;
SELECT COUNT(*)  FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'math';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT   d.department_id,   d.department_name,   COUNT(dp.degree_program_id) AS degree_count FROM   Departments d JOIN   Degree_Programs dp ON   d.department_id = dp.department_id GROUP BY   d.department_id,   d.department_name ORDER BY   degree_count DESC LIMIT 1;
SELECT department_id, department_name FROM     Departments WHERE     department_id = (         SELECT             department_id         FROM             Degree_Programs         GROUP BY             department_id         ORDER BY             COUNT(degree_program_id) DESC         LIMIT 1     );
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs;
SELECT COUNT(*)  FROM      Departments;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(*)  FROM Degree_Programs;
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (     SELECT department_id     FROM Departments     WHERE department_name = 'Engineering' );
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (     SELECT department_id     FROM Departments     WHERE department_name = 'Engineering' );
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2;
SELECT Courses.course_id, Courses.course_name FROM Courses WHERE (SELECT COUNT(*) FROM Sections WHERE Sections.course_id = Courses.course_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT semester_id, semester_name, COUNT(student_id) as student_count FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY student_count DESC LIMIT 1;
SELECT   semester_id,   semester_name,   COUNT(student_id) AS num_students FROM   Semesters   JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY   Semesters.semester_id,   Semesters.semester_name ORDER BY   num_students DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE 'Bachelors%';
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY num_students DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) as num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1;
SELECT   c.course_name FROM   Courses c JOIN   Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY   c.course_id ORDER BY   COUNT(sec.student_enrolment_id) DESC LIMIT 1;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Semesters sm ON se.semester_id = sm.semester_id WHERE s.date_left IS NOT NULL ORDER BY sm.semester_name ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (     SELECT MIN(date_left)     FROM Students     WHERE date_left IS NOT NULL )
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id LIMIT 1;
SELECT   current_address_id,   line_1,   line_2,   line_3 FROM   Addresses WHERE   current_address_id IN (     SELECT       current_address_id     FROM       Students     GROUP BY       current_address_id     ORDER BY       COUNT(student_id) DESC     LIMIT 1   );
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) as average_transcript_date FROM Transcripts;
SELECT AVG(strftime('%s', transcript_date)) AS average_transcript_date FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date) AS earliest_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT COUNT(*) as total_transcripts FROM Transcripts;
SELECT COUNT(*)  FROM Transcripts;
SELECT MAX(transcript_date) as last_transcript_release_date FROM Transcripts;
SELECT MAX(transcript_date) as last_transcript_date FROM Transcripts;
SELECT COUNT(student_course_id) AS times_enrolled, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY times_enrolled DESC LIMIT 1;
SELECT MAX(course_count) AS max_course_count, course_id FROM (     SELECT         course_id,         COUNT(*) AS course_count     FROM         Student_Enrolment_Courses     JOIN         Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id     GROUP BY         course_id ) AS course_counts;
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT     transcript_id   FROM     Transcript_Contents   GROUP BY     transcript_id   HAVING     COUNT(student_course_id) = (       SELECT         MIN(course_count)       FROM (         SELECT           COUNT(student_course_id) AS course_count         FROM           Transcript_Contents         GROUP BY           transcript_id       )     ) ) LIMIT 1;
SELECT transcript_id, transcript_date, COUNT(student_course_id) AS num_results FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY num_results ASC LIMIT 1;
SELECT Semesters.semester_id, Semesters.semester_name, Semesters.semester_description FROM Student_Enrolment INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id INNER JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (     SELECT     degree_program_id     FROM     Degree_Programs     WHERE     degree_summary_name IN ('Masters', 'Bachelors') ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT Addresses.* FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id;
SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC;
SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT section_id, course_id, section_name, section_description, other_details FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM     Cartoon WHERE     Directed_by = "Ben Jones";
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;
SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS number_of_series_names, COUNT(DISTINCT Content) AS number_of_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) as num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;
SELECT Language, COUNT(id) as num_channels FROM TV_Channel GROUP BY Language HAVING num_channels = (     SELECT MIN(num_channels)     FROM (         SELECT COUNT(id) as num_channels         FROM TV_Channel         GROUP BY Language     ) )
SELECT Language, COUNT(id) as num_channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) as num_channels FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT Title FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.id JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio";
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT *  FROM     TV_series ORDER BY     Rating DESC;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT series_name FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Directed_by, COUNT(*) as Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) as number_of_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM     Cartoon WHERE     Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 1;
SELECT DISTINCT Country FROM     TV_Channel JOIN     TV_series ON TV_Channel.id = TV_series.Channel JOIN     Cartoon ON TV_series.id = Cartoon.Channel WHERE     Cartoon.Written_by = "Todd Casey";
SELECT DISTINCT Country FROM     Cartoon JOIN     TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE     Written_by = "Todd Casey";
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Written_by = "Todd Casey" )
SELECT DISTINCT Country FROM     TV_Channel WHERE     id NOT IN (         SELECT             Channel         FROM             Cartoon         WHERE             Written_by = "Todd Casey"     );
SELECT TV_Channel.series_name, TV_Channel.Country FROM     Cartoon JOIN     TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN     TV_series ON TV_Channel.id = TV_series.Channel WHERE     Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" OR Cartoon.Directed_by = "Michael Chang";
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL GROUP BY TV_Channel.id;
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (     SELECT     Channel     FROM     Cartoon     WHERE     Directed_by = 'Ben Jones' )
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (     SELECT     Channel     FROM     Cartoon     WHERE     Directed_by = "Ben Jones" );
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*)  FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings)  FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT Name, Final_Table_Made FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC;
SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1;
SELECT Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Height = (SELECT MAX(Height) FROM people);
SELECT Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Height DESC LIMIT 1;
SELECT AVG(Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Height > 200;
SELECT AVG(Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Height > 200;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(People_ID) as NumberOfPeople FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality != "Russia";
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL;
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MIN(area_code) AS min_area_code, MAX(area_code) AS max_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE AREA_CODE_STATE.state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM   VOTES;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2) AS VOTE_COUNT ON CONTESTANTS.contestant_number = VOTE_COUNT.contestant_number;
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (   SELECT     contestant_number   FROM     VOTES   GROUP BY     contestant_number   ORDER BY     COUNT(vote_id) ASC   LIMIT 1 )
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES);
SELECT area_code FROM   (SELECT     substr(phone_number, 1, 3) AS area_code,     COUNT(*) AS num_votes   FROM     VOTES   GROUP BY     area_code) ORDER BY   num_votes DESC LIMIT 1;
SELECT created, state, phone_number FROM     VOTES JOIN     CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE     CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT A.area_code FROM   AREA_CODE_STATE AS A   JOIN VOTES AS V1 ON A.area_code = SUBSTR(V1.phone_number, 1, 3)   JOIN VOTES AS V2 ON A.area_code = SUBSTR(V2.phone_number, 1, 3)   JOIN CONTESTANTS AS C1 ON V1.contestant_number = C1.contestant_number   JOIN CONTESTANTS AS C2 ON V2.contestant_number = C2.contestant_number WHERE   C1.contestant_name = 'Tabatha Gehling'   AND C2.contestant_name = 'Kelly Clauss'   AND V1.phone_number != V2.phone_number;
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'
SELECT COUNT(*) FROM     country WHERE     GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul';
SELECT Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul';
SELECT Language, MAX(Percentage) as Most_Popular_Percentage FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = "Aruba") AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = "Aruba"));
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS MaximumGNP FROM country WHERE country.Continent = 'Asia';
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea)  FROM country  WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) as TotalPopulation FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) as Average_GNP, SUM(Population) as Total_Population FROM country WHERE GovernmentForm = 'US Territory';
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US Territory';
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM     country WHERE     Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM     country WHERE     Continent = 'Africa';
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT Name FROM country WHERE Code = (     SELECT     CountryCode     FROM     countrylanguage     GROUP BY     CountryCode     ORDER BY     COUNT(Language) DESC     LIMIT 1 )
SELECT Name FROM country WHERE Code = (     SELECT     CountryCode     FROM     countrylanguage     GROUP BY     CountryCode     ORDER BY     COUNT(Language) DESC     LIMIT 1 )
SELECT Continent, COUNT(DISTINCT Language) AS NumberOfLanguages FROM     country     JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY     Continent ORDER BY     NumberOfLanguages DESC LIMIT 1;
SELECT Continent, COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY NumberOfLanguages DESC LIMIT 1;
SELECT COUNT(DISTINCT c1.Code) FROM     country AS c1 JOIN     countrylanguage AS cl1 ON     c1.Code = cl1.CountryCode JOIN     countrylanguage AS cl2 ON     c1.Code = cl2.CountryCode WHERE     cl1.Language = 'English'     AND cl2.Language = 'Dutch';
SELECT COUNT(DISTINCT country.Code) FROM     country JOIN     countrylanguage ON     country.Code = countrylanguage.CountryCode WHERE     countrylanguage.Language IN ('English', 'Dutch')
SELECT country.Name FROM country JOIN countrylanguage AS English ON country.Code = English.CountryCode JOIN countrylanguage AS French ON country.Code = French.CountryCode WHERE English.Language = 'English' AND French.Language = 'French' AND English.IsOfficial = 'T' AND French.IsOfficial = 'T';
SELECT country.Name FROM country JOIN countrylanguage AS English ON country.Code = English.CountryCode JOIN countrylanguage AS French ON country.Code = French.CountryCode WHERE English.Language = 'English' AND French.Language = 'French' AND English.IsOfficial = 'T' AND French.IsOfficial = 'T';
SELECT country.Name FROM country JOIN countrylanguage AS English ON country.Code = English.CountryCode JOIN countrylanguage AS French ON country.Code = French.CountryCode WHERE English.Language = 'English' AND English.IsOfficial = 'T' AND French.Language = 'French' AND French.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT Continent) FROM     country WHERE     Code IN (         SELECT             CountryCode         FROM             countrylanguage         WHERE             Language = 'Chinese'     );
SELECT DISTINCT Region FROM     country WHERE     Code IN (         SELECT             CountryCode         FROM             countrylanguage         WHERE             Language IN ('English', 'Dutch')     );
SELECT DISTINCT Region FROM     country WHERE     Code IN (         SELECT             CountryCode         FROM             countrylanguage         WHERE             Language IN ('Dutch', 'English')     );
SELECT Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T'
SELECT Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T';
SELECT Language, SUM(Percentage * Population) AS TotalSpeakers FROM   countrylanguage   JOIN country ON countrylanguage.CountryCode = country.Code WHERE   Continent = 'Asia' GROUP BY   Language ORDER BY   TotalSpeakers DESC LIMIT 1;
SELECT Language FROM   countrylanguage WHERE   CountryCode IN (     SELECT       Code     FROM       country     WHERE       Continent = 'Asia'   ) GROUP BY   Language ORDER BY   COUNT(CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT     Code   FROM     country   WHERE     GovernmentForm = 'Republic' ) GROUP BY Language HAVING COUNT(CountryCode) = 1;
SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT     Code   FROM     country   WHERE     GovernmentForm LIKE '%republic%' ) GROUP BY Language HAVING COUNT(CountryCode) = 1;
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT     CountryCode   FROM     countrylanguage   WHERE     Language = 'English'     AND IsOfficial = 'T' )
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT     CountryCode   FROM     countrylanguage   WHERE     Language = 'English'     AND IsOfficial = 'T' );
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT SUM(Population) FROM     country WHERE     Code NOT IN (         SELECT             CountryCode         FROM             countrylanguage         WHERE             Language = 'English'     );
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = "Beatrix" AND countrylanguage.IsOfficial = "T";
SELECT Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND country.HeadOfState = 'Beatrix';
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930;
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T';
SELECT Name FROM country WHERE SurfaceArea > (     SELECT     MAX(SurfaceArea)     FROM     country     WHERE     Continent = 'Europe' )
SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (     SELECT     MAX(c2.SurfaceArea)     FROM     country c2     WHERE     c2.Continent = 'Europe' )
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (     SELECT     MIN(c2.Population)     FROM     country AS c2     WHERE     c2.Continent = 'Asia' )
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (     SELECT     MIN(c2.Population)     FROM     country AS c2     WHERE     c2.Continent = 'Asia' )
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (   SELECT     MAX(Population)   FROM     country   WHERE     Continent = 'Africa' )
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Asia' AND c1.Population > (     SELECT     MAX(c2.Population)     FROM     country AS c2     WHERE     c2.Continent = 'Africa' )
SELECT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT Code FROM     country WHERE     Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')     AND GovernmentForm != 'Republic';
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT Name, Population, HeadOfState, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT country.Name, COUNT(countrylanguage.Language) as NumberOfLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) as NumberOfLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
SELECT District, COUNT(*) as NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT GovernmentForm, SUM(Population) as TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) as TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, SUM(Population) as TotalPopulation, AVG(LifeExpectancy) as AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*)  FROM     country WHERE     Continent = 'Asia';
SELECT COUNT(*)  FROM country  WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1;
SELECT Language FROM   countrylanguage GROUP BY   Language ORDER BY   COUNT(CountryCode) DESC LIMIT 1;
SELECT country.Name AS Country, countrylanguage.Language AS Language, MAX(countrylanguage.Percentage) AS Percentage FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY country.Name;
SELECT country.Code, country.Name, countrylanguage.Language, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code, country.Name ORDER BY country.Name;
SELECT COUNT(*) FROM     (SELECT         country.Code     FROM         country     JOIN         countrylanguage ON country.Code = countrylanguage.CountryCode     WHERE         countrylanguage.Language = 'Spanish'     GROUP BY         country.Code     HAVING         countrylanguage.Percentage = MAX(countrylanguage.Percentage)) AS SpanishSpeakingCountries;
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' ORDER BY Percentage DESC;
SELECT COUNT(Conductor_ID) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != "USA";
SELECT Name FROM conductor WHERE Nationality != "USA";
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) as Average_Attendance FROM show;
SELECT AVG(Attendance) as Average_Attendance FROM show;
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type != "Live final";
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != "Live final";
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality)  FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor WHERE Age = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Name FROM     conductor WHERE     Conductor_ID IN (         SELECT             Conductor_ID         FROM             orchestra         GROUP BY             Conductor_ID         HAVING             COUNT(Orchestra_ID) > 1     );
SELECT Name FROM     conductor WHERE     Conductor_ID IN (         SELECT             Conductor_ID         FROM             orchestra         GROUP BY             Conductor_ID         HAVING             COUNT(Orchestra_ID) > 1     );
SELECT Name FROM conductor WHERE Conductor_ID = (   SELECT     Conductor_ID   FROM     orchestra   GROUP BY     Conductor_ID   ORDER BY     COUNT(Orchestra_ID) DESC   LIMIT 1 );
SELECT Name FROM     conductor WHERE     Conductor_ID = (         SELECT             Conductor_ID         FROM             orchestra         GROUP BY             Conductor_ID         ORDER BY             COUNT(Orchestra_ID) DESC         LIMIT 1     );
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) as NumberOfOrchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) as Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC;
SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company, COUNT(*) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumberOfOrchestras DESC LIMIT 1;
SELECT Record_Company, COUNT(*) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumberOfOrchestras DESC LIMIT 1;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Orchestra_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Orchestra_ID IS NULL;
SELECT record_company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Record_Company IN (   SELECT Record_Company   FROM orchestra   WHERE Year_of_Founded > 2003 );
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT Year_of_Founded FROM     orchestra WHERE     Orchestra_ID IN (         SELECT             Orchestra_ID         FROM             performance         GROUP BY             Orchestra_ID         HAVING             COUNT(Performance_ID) > 1     );
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT     Orchestra_ID   FROM     performance   GROUP BY     Orchestra_ID   HAVING     COUNT(Performance_ID) > 1 );
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*)  FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = "Kyle";
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;
SELECT student_id, COUNT(friend_id) as num_friends FROM Friend GROUP BY student_id;
SELECT Highschooler.ID, Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id) as num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) as num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY Highschooler.name;
SELECT name FROM Highschooler WHERE ID = (     SELECT     student_id     FROM     Friend     GROUP BY     student_id     ORDER BY     COUNT(friend_id) DESC     LIMIT 1 )
SELECT name FROM     Highschooler WHERE     ID = (         SELECT             student_id         FROM             Friend         GROUP BY             student_id         ORDER BY             COUNT(friend_id) DESC         LIMIT 1     );
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN   (SELECT     student_id,     COUNT(friend_id) AS num_friends   FROM     Friend   GROUP BY     student_id   HAVING     num_friends >= 3) AS friends_count ON   Highschooler.ID = friends_count.student_id;
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle';
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'
SELECT COUNT(friend_id)  FROM Friend  JOIN Highschooler ON Highschooler.ID = Friend.student_id  WHERE Highschooler.name = 'Kyle';
SELECT COUNT(friend_id) FROM Friend JOIN Highschooler ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle';
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend);
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend);
SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL;
SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID
SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID;
SELECT student_id, COUNT(liked_id) as num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(liked_id) as num_likes FROM Likes GROUP BY student_id;
SELECT Highschooler.name, COUNT(Likes.liked_id) as num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name ORDER BY num_likes DESC;
SELECT Highschooler.name, COUNT(Likes.liked_id) as num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY Highschooler.name;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
SELECT Highschooler.name FROM     Highschooler JOIN     (SELECT         student_id,         COUNT(*) AS num_likes     FROM         Likes     GROUP BY         student_id     HAVING         num_likes >= 2) AS liked_students ON     Highschooler.ID = liked_students.student_id;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID HAVING COUNT(Likes.student_id) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN   (SELECT     student_id,     COUNT(friend_id) AS num_friends   FROM     Friend   GROUP BY     student_id   HAVING     num_friends >= 2) AS FriendCount ON   Highschooler.ID = FriendCount.student_id WHERE   Highschooler.grade > 5;
SELECT Highschooler.name FROM     Highschooler WHERE     Highschooler.grade > 5     AND (         SELECT COUNT(*)         FROM Friend         WHERE Friend.student_id = Highschooler.ID     ) >= 2;
SELECT COUNT(*)  FROM Likes  JOIN Highschooler ON Highschooler.ID = Likes.student_id  WHERE Highschooler.name = 'Kyle';
SELECT COUNT(*)  FROM Likes  JOIN Highschooler ON Highschooler.ID = Likes.student_id  WHERE Highschooler.name = 'Kyle';
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT DISTINCT O.state FROM Owners O INNER JOIN Professionals P ON O.state = P.state;
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(treatment_id) > 2 )
SELECT   Professionals.professional_id,   Professionals.last_name,   Professionals.cell_number FROM   Professionals WHERE   Professionals.state = 'Indiana'   OR Professionals.professional_id IN (     SELECT       Treatments.professional_id     FROM       Treatments     GROUP BY       Treatments.professional_id     HAVING       COUNT(Treatments.treatment_id) > 2   );
SELECT name FROM Dogs WHERE dog_id NOT IN (   SELECT     dog_id   FROM     Treatments   GROUP BY     dog_id   HAVING     SUM(cost_of_treatment) > 1000 );
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Dogs.dog_id HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (     SELECT owner_id     FROM Dogs     GROUP BY owner_id     ORDER BY COUNT(dog_id) DESC     LIMIT 1 )
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (     SELECT     owner_id     FROM     Dogs     GROUP BY     owner_id     ORDER BY     COUNT(dog_id) DESC     LIMIT 1 );
SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(treatment_id) >= 2 )
SELECT breed_name FROM Breeds WHERE breed_code = (     SELECT     breed_code     FROM     Dogs     GROUP BY     breed_code     ORDER BY     COUNT(*) DESC     LIMIT 1 );
SELECT breed_name FROM Breeds JOIN (SELECT breed_code, COUNT(*) as count FROM Dogs GROUP BY breed_code ORDER BY count DESC LIMIT 1) AS most_common_breed ON Breeds.breed_code = most_common_breed.breed_code;
SELECT O.owner_id, O.last_name, COUNT(T.treatment_id) AS treatment_count FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY treatment_count DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_code, treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;
SELECT   o.owner_id,   o.zip_code,   SUM(t.cost_of_treatment) as total_cost FROM   Owners o   JOIN Dogs d ON o.owner_id = d.owner_id   JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY   o.owner_id,   o.zip_code ORDER BY   total_cost DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code     GROUP BY professional_id     HAVING COUNT(DISTINCT Treatment_Types.treatment_type_code) >= 2 )
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code     GROUP BY professional_id     HAVING COUNT(DISTINCT Treatment_Types.treatment_type_code) >= 2 )
SELECT   Professionals.first_name,   Professionals.last_name FROM   Professionals JOIN   Treatments ON   Professionals.professional_id = Treatments.professional_id WHERE   Treatments.cost_of_treatment < (     SELECT       AVG(cost_of_treatment)     FROM       Treatments   ) GROUP BY   Professionals.professional_id;
SELECT   Professionals.first_name,   Professionals.last_name FROM   Professionals JOIN   Treatments ON Professionals.professional_id = Treatments.professional_id WHERE   Treatments.cost_of_treatment < (     SELECT       AVG(cost_of_treatment)     FROM       Treatments   ) GROUP BY   Professionals.professional_id;
SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (     SELECT breed_code     FROM Breeds     JOIN Dogs ON Breeds.breed_code = Dogs.breed_code     GROUP BY Breeds.breed_code     ORDER BY COUNT(Dogs.dog_id) ASC     LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs WHERE abandoned_yn = 'N');
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.date_of_birth = (   SELECT     MAX(date_of_birth)   FROM     Dogs )
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id)  FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM     Dogs WHERE     age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT MAX(date_of_treatment), cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')
SELECT COUNT(DISTINCT o.owner_id) AS NumberOfOwnersWithoutDogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT COUNT(*)  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT AVG(age) as average_age FROM Dogs;
SELECT AVG(age) as average_age FROM Dogs;
SELECT MAX(age) as oldest_dog_age FROM Dogs;
SELECT MAX(age) as oldest_dog_age FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount)  FROM Charges;
SELECT MAX(charge_amount)  FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT breed_name, size_description FROM Breeds, Sizes;
SELECT DISTINCT breed_code, size_code FROM Dogs;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(Singer_ID) FROM singer;
SELECT COUNT(*)  FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != "France";
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Citizenship, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS count FROM   singer GROUP BY   Citizenship ORDER BY   count DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) as Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 GROUP BY singer.Name;
SELECT Name FROM     singer WHERE     Singer_ID IN (         SELECT             Singer_ID         FROM             song         GROUP BY             Singer_ID         HAVING             COUNT(Song_ID) > 1     );
SELECT Name FROM     singer WHERE     Singer_ID IN (         SELECT             Singer_ID         FROM             song         GROUP BY             Singer_ID         HAVING             COUNT(Song_ID) > 1     );
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name;
SELECT singer.Name, SUM(song.Sales) as Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;
SELECT DISTINCT Citizenship FROM     singer WHERE     Birth_Year < 1945     OR Birth_Year > 1955;
SELECT COUNT(*)  FROM Other_Available_Features;
SELECT feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon';
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;
SELECT property_name FROM Properties WHERE (room_count > 1) AND (property_type_code = 'hse' OR property_type_code = 'apt');
